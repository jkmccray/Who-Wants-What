@using Microsoft.AspNetCore.Identity

@model WhoWantsWhat.Models.ViewModels.GroupsViewModels.MyGroupsAndSearchViewModel

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Index";
}

<h1>Groups</h1>

<div class="search-box-and-create-button">
    <form asp-action="Index" class="form-inline my-2 my-lg-0">
        <input asp-for="GroupSearchText" class="form-control mr-sm-2" type="text" placeholder="Search for groups to join">
        <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
    </form>
    <div>
        <a class="btn btn-primary mt-3 btn-create-new-group" asp-action="Create"></a>
    </div>
</div>
@if (Model.GroupSearchText != null && Model.Groups.Count == 0)
{
    <p>No groups found. Please try another search.</p>
}
<div class="row group-list">
    @foreach (var g in Model.Groups)
    {
        var groupUsers = g.GroupUsers.OrderBy(gu => gu.User.LastName);
        var groupWishLists = g.GroupWishLists;
    <div class="group-card card mb-4">
        @if (groupUsers.Any(gu => gu.UserId == UserManager.GetUserId(User) && gu.Joined))
        {
            <h4 class="card-header group-card-header no-caps">@Html.ActionLink(g.Name.ToString(), "Details", new { id = g.GroupId })</h4>
        }
        else
        {
            <h4 class="card-header group-card-header no-caps">@g.Name</h4>
        }
        <div class="card-body p-4">
            <h5 class="card-title">Members:</h5>
            <ul class="list-group group-members">
                @foreach (var u in groupUsers.Where(gu => gu.Joined))
                {
                    var UserId = u.UserId;
                    var GroupId = g.GroupId;
                <li class="list-group-item d-flex align-items-center pt-0 pb-0 pl-1">
                    <img class="group-member-icon ml-2" src="~/images/member-icon.png" alt="Member Icon" />
                    @if (groupUsers.Any(gu => gu.UserId == UserManager.GetUserId(User) && gu.Joined)
                        && groupWishLists.Any(gwl => gwl.GroupId == GroupId && gwl.WishList.UserId == u.UserId)
                        && u.UserId != UserManager.GetUserId(User))
                    {
                        <form>
                            <input type="hidden" asp-for="@UserId" />
                            <input type="hidden" asp-for="@GroupId" />
                            <button class="btn btn-link pt-2 pb-2 pl-3" asp-action="Index" asp-controller="WishLists">@u.User.FirstName @u.User.LastName</button>
                        </form>
                    }
                    else
                    {
                        <span class="btn default-cursor pt-2 pb-2 pl-3 text-left">@u.User.FirstName @u.User.LastName</span>
                    }
                </li>
                }
            </ul>
            @if (!groupUsers.Any(gu => gu.UserId == UserManager.GetUserId(User)))
            {
                var GroupId = g.GroupId;
                <form asp-action="RequestToJoinGroup" asp-controller="Groups">
                    <input label="GroupId" type="hidden" asp-for="@GroupId" />
                    <input label="GroupSearchText" type="hidden" asp-for="GroupSearchText" />
                    <input type="submit" value="Request to Join" class="btn btn-outline-primary mt-3" />
                </form>
            }
            else if (!groupUsers.FirstOrDefault(gu => gu.UserId == UserManager.GetUserId(User)).Joined)
            {
                <button disabled class="btn btn-secondary disabled mt-3">Requested to Join</button>
            }
        </div>
    </div>
    }
</div>